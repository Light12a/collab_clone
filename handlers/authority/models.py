from sqlalchemy import Column, Date, DateTime, ForeignKey, String, text
from sqlalchemy.dialects.mysql import BIGINT, INTEGER, BOOLEAN
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base
from handlers.tenant_settings.models import Tenant
from services.database.mysqldb import Base


class Authority(Base):
   __tablename__ = 'authority'

   auth_id = Column(BIGINT(20), primary_key=True)
   tenant_id = Column(ForeignKey(Tenant.tenant_id), index=True, comment='Tenant ID')
   auth_name = Column(String(256), nullable=False)
   use_monitor = Column(BOOLEAN, server_default=text("0"))
   use_address = Column(BOOLEAN, server_default=text("0"))
   edit_address = Column(BOOLEAN, server_default=text("0"))
   dl_address = Column(BOOLEAN, server_default=text("0"))
   del_address = Column(BOOLEAN, server_default=text("0"))
   scope_address = Column(INTEGER(11), server_default=text("0"))
   use_responding = Column(BOOLEAN, server_default=text("0"))
   edit_responding = Column(BOOLEAN, server_default=text("0"))
   dl_responding = Column(BOOLEAN, server_default=text("0"))
   del_responding = Column(BOOLEAN, server_default=text("0"))
   scope_responding = Column(INTEGER(11), server_default=text("0"))
   use_message = Column(BOOLEAN, server_default=text("0"))
   edit_message = Column(BOOLEAN, server_default=text("0"))
   dl_message = Column(BOOLEAN, server_default=text("0"))
   del_message = Column(BOOLEAN, server_default=text("0"))
   scope_message = Column(INTEGER(11), server_default=text("0"))
   edit_dashboard = Column(BOOLEAN, server_default=text("0"))
   del_dashboard = Column(BOOLEAN, server_default=text("0"))
   scope_dashboard = Column(INTEGER(11), server_default=text("0"))
   use_report = Column(BOOLEAN, server_default=text("0"))
   edit_report = Column(BOOLEAN, server_default=text("0"))
   dl_report = Column(BOOLEAN, server_default=text("0"))
   del_report = Column(BOOLEAN, server_default=text("0"))
   scope_report = Column(INTEGER(11), server_default=text("0"))
   use_user = Column(BOOLEAN, server_default=text("0"))
   edit_user = Column(BOOLEAN, server_default=text("0"))
   dl_user = Column(BOOLEAN, server_default=text("0"))
   del_user = Column(BOOLEAN, server_default=text("0"))
   scope_user = Column(INTEGER(11), server_default=text("0"))
   use_group = Column(BOOLEAN, server_default=text("0"))
   edit_group = Column(BOOLEAN, server_default=text("0"))
   dl_group = Column(BOOLEAN, server_default=text("0"))
   del_group = Column(BOOLEAN, server_default=text("0"))
   scope_group = Column(INTEGER(11), server_default=text("0"))
   use_auth = Column(BOOLEAN, server_default=text("0"))
   edit_auth = Column(BOOLEAN, server_default=text("0"))
   dl_auth = Column(BOOLEAN, server_default=text("0"))
   del_auth = Column(BOOLEAN, server_default=text("0"))
   use_flow = Column(BOOLEAN, server_default=text("0"))
   edit_flow = Column(BOOLEAN, server_default=text("0"))
   del_flow = Column(BOOLEAN, server_default=text("0"))
   use_seat = Column(BOOLEAN, server_default=text("0"))
   edit_seat = Column(BOOLEAN, server_default=text("0"))
   del_seat = Column(BOOLEAN, server_default=text("0"))
   scope_seat = Column(INTEGER(11), server_default=text("0"))
   use_chat = Column(BOOLEAN, server_default=text("0"))
   scope_chat = Column(INTEGER(11), server_default=text("0"))
   use_speech = Column(BOOLEAN, server_default=text("0"))
   edit_speech = Column(BOOLEAN, server_default=text("0"))
   del_speech = Column(BOOLEAN, server_default=text("0"))
   use_trigger = Column(BOOLEAN, server_default=text("0"))
   edit_trigger = Column(BOOLEAN, server_default=text("0"))
   del_trigger = Column(BOOLEAN, server_default=text("0"))
   use_config = Column(BOOLEAN, server_default=text("0"))
   edit_config = Column(BOOLEAN, server_default=text("0"))
   use_log = Column(BOOLEAN, server_default=text("0"))
   dl_log = Column(BOOLEAN, server_default=text("0"))
   insert_date = Column(DateTime, nullable=False, server_default=text("current_timestamp()"))
   update_date = Column(DateTime, nullable=False, server_default=text("current_timestamp()"))

   tenant = relationship(Tenant)
